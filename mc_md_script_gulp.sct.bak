#! /bin/bash
# dependencias:
CPUs=4
# RASPA, GULP
loc=`pwd`
objsMD=$loc/objsMD
objsMC=$loc/objsMC
#
mc_cycles=100
md_cycles=101
equi_cycles=101
#
cation=$1
ncation=$2
temperature=$4
framework=$3
pressure=0.0
optimisate=yes
n_mc=5
RandomSeed=111111111
function print_input_RASPA {
echo "SimulationType             $SimulationType
NumberOfCycles                   $ncycles
NumberOfInitializationCycles     $inicialization
NumberOfEquilibrationCycles      $equilibration
#RandomSeed                       $RandomSeed
RestartFile                      $RestartFile
PrintEvery                       100
Movies                           yes
WriteMoviesEvery                 $ncycles
#
RemoveAtomNumberCodeFromLabel    yes
UseChargesFromCIFFile            no
#
RemoveBondNeighboursFromLongRangeInteraction    yes
RemoveBendNeighboursFromLongRangeInteraction    no
RemoveTorsionNeighboursFromLongRangeInteraction no
#
Forcefield                                      local
CutOff                                          12.0
ChargeMethod                                    Ewald
EwaldPrecision                                  1e-8
Framework  0
FrameworkName                                   RHO_${framework}_C1
UnitCells                                       1 1 1
InputFileType                                   cif
#
ExternalTemperature                             800.0
FlexibleFramework                               $FlexibleFramework
FrameworkDefinitions                            local
Ensemble                                        ${ensemble}
#
component 0  MoleculeName                     $cation
             MoleculeDefinition               TraPPE
             ExtraFrameworkMolecule           yes
             TranslationProbability           1.0
             RandomTranslationProbability     1.0
             CreateNumberOfMolecules          $ncations" > simulation.input
}
function inicialization_sim {
  folder=ini
  mkdir $folder
  cd $folder
   FrameworkName=RHO_${framework}_C1
   cp $objsMC/*.def .
   cp $objsMC/$FrameworkName.cif .
   SimulationType=MC
   RestartFile=no
   ncations=$ncation
   ncycles=0
   inicialization=1
   equilibration=1
   FlexibleFramework=no 
   ensemble=NVT
   temp=$temperature
   print_input_RASPA
   echo "inicialisation [RASPA]"
   simulate > /dev/null
   update
  cd ..
}
function MC_move {
  folder=MC_${i}${j}
  mkdir $folder
  cd $folder
   cp $objsMC/*.def .
   cp $objsMD/*.f90 .
   cp $objsMD/gin.* .
   cp ../RHO_${framework}_C1.cif .
   SimulationType=MC
   RestartFile=no
   FrameworkName=RHO_${framework}_C1
   ncations=$ncation
   ncycles=$mc_cycles
   inicialization=1
   equilibration=1
   FlexibleFramework=no
   temp=$temperature
   print_input_RASPA
   echo "MC Cycle $i$j [RASPA]"
   simulate > /dev/null
   cp Movies/System_0/Movie_*_allcomponents.pdb input.pdb
    gfortran -O2 -march=native pdb2gin.f90 -o pdb2gin
    echo "Sorting PDB"
    head -n2 input.pdb > pdb.top
    tail -n1 input.pdb > pdb.bottom
    touch pdb.middle
    for k in 'Si' 'Al' 'Na' 'K' 'Cs' 'Ca' 'Sr' 'Fe' 'O ' 'sh' ; do
       grep "$k " input.pdb | grep 'ATOM' >> pdb.middle
       sed -i "/$k /d" input.pdb
    done
    cat pdb.top    >  input.pdb
    cat pdb.middle >> input.pdb
    cat pdb.bottom >> input.pdb
    echo "PDB 2 gin"
    ./pdb2gin > /dev/null
    sed -i 's/sh    core/ O    shel/g' gin
    sed -i 's/sh   core/ O  shel/g' gin
    cat gin.bottom >> gin
    echo "optimise shell [ GULP ]"
    if [ $optimisate == "yes" ] ; then
     cat gin.top.opti.shell >  opti.gin
     cat gin                >> opti.gin
     cat gin.bottom.opti    >> opti.gin
     mpirun --np $CPUs gulp < opti.gin > opti.gout
    fi
    sleep 1
    cp gin.res ../gin.res.$i.$j
  cd ..
}
function choose_ener {
  gfortran -O2 -march=native pdb2gin.f90 -o pdb2gin
  gfortran -O2 -march=native gin2dlpoly.f90 -o gin2dlpoly
  gfortran -O2 -march=native arc2cif.f90 -o arc2cif
  energia=6006919099999.9
  confi=0
  for j in `seq 1 $n_mc` ; do
      ener=`grep 'Current total potential energy:' ../MC_${i}${j}/Output/System_0/*.data | grep 'avg.' | tail -n1 | awk '{print $8}' | sed 's/)//g'`
      echo $j $ener
      if [ `echo "$ener < $energia" | bc -l` == 1 ] ; then
         confi=$j
         energia=$ener
      fi
  done
  echo "Select: MC [ $confi ], [ $energia ]"
}

function choose_boltz {
  gfortran -O2 -march=native pdb2gin.f90 -o pdb2gin
  gfortran -O2 -march=native gin2dlpoly.f90 -o gin2dlpoly
  gfortran -O2 -march=native arc2cif.f90 -o arc2cif
  gfortran -O2 -march=native choose_structure_mc.f90 -o choose_structure_mc
  config=0
  rm choose_structure_mc.input toto
  echo $n_mc > choose_structure_mc.input
  echo $temp >> choose_structure_mc.input
  for j in `seq 1 $n_mc` ; do
      ener=`grep 'Current total potential energy:' ../MC_${i}${j}/Output/System_0/*.data | grep 'avg.' | tail -n1 | awk '{print $8}' | sed 's/)//g'`
      echo "$j $ener" >> toto
  done
  sort -nk2 toto >> choose_structure_mc.input 
  ./choose_structure_mc < choose_structure_mc.input > choose_structure_mc.output
  cat choose_structure_mc.output
  confi=`tail -n1 choose_structure_mc.output | awk '{print $1}'`
  energia=`tail -n1 choose_structure_mc.output | awk '{print $2}'`
  echo "Select: MC [ $confi ], [ $energia ]"
}
function choose_boltz_gulp {
  gfortran -O2 -march=native gin2dlpoly.f90 -o gin2dlpoly
  gfortran -O2 -march=native arc2cif.f90 -o arc2cif
  gfortran -O2 -march=native choose_structure_mc.f90 -o choose_structure_mc
  config=0
  rm choose_structure_mc.input toto
  echo $n_mc > choose_structure_mc.input
  echo $temp >> choose_structure_mc.input
  for j in `seq 1 $n_mc` ; do
      ener=`grep 'totalenergy' ../gin.res.$i.$j | awk '{print $2}'`
      ener=`echo "$ener * 100000.0 / 8.6173324" | bc -l`
      echo "$j $ener" >> toto
  done
  sort -nk2 toto >> choose_structure_mc.input 
  ./choose_structure_mc < choose_structure_mc.input > choose_structure_mc.output
  cat choose_structure_mc.output
  confi=`tail -n1 choose_structure_mc.output | awk '{print $1}'`
  energia=`tail -n1 choose_structure_mc.output | awk '{print $2}'`
  echo "Select: MC [ $confi ], [ $energia ]"
}
#
function MD_move {
  timestep=0.0002
  temp=$temperature
  ncycles=$md_cycles
  production=`echo "$timestep * $ncycles" | bc -l`
  equilibration=`echo "$timestep * $equi_cycles" | bc -l`
  produequi=`echo "$production + $equilibration" | bc -l`
  folder=MD_$i
  mkdir $folder
  cd $folder
   cp $objsMD/* .
   choose_boltz_gulp
   cp ../gin.res.$i.$confi gin.res
   finalizado=0
   while [ `echo "$finalizado == 0" | bc -l` == 1 ] ; do
#  molecular dynamics
    sed 's/opti conv/md conp/g' gin.res > md.gin
    sed -i '/output/d' md.gin
    sed -i '/dump every/d' md.gin
    cat gin.bottom.md >> md.gin
    sed -i "s/TEMPERATURE/$temp/g" md.gin
    sed -i "s/PRODUCTION/$production/g" md.gin
    sed -i "s/EQUILIBRATION/$equilibration/g" md.gin
    produequi=`echo "$production + $equilibration" | bc -l`
    sed -i "s/PRODUEQUI/$produequi/g" md.gin
    sed -i "s/TIMESTEP/$timestep/g" md.gin
    mpirun --np $CPUs gulp < md.gin > md.gout.$i
    finalizado=`grep 'Job Finished' md.gout.${i} | wc -l`
    if [ `echo "$finalizado == 1" | bc -l` == 1 ] ; then
     echo "Simulation finish"
     touch GREAT
    else
     echo "Simulation wrong"
     touch ERROR
     confi=`echo $RANDOM % $n_mc + 1 | bc`
     cp ../input_${i}${confi}.pdb input.pdb
    fi
   done
  sed 's/md conp/single noenergy/g' md.res > res2cif.gin
  gulp < res2cif.gin > res2cif.gout
#  -----------------------------------
  cp md.cif  out.cif
  cp out.cif out.cif.$i
  for k in 'Na' 'K' 'Cs' 'Ca' 'Sr' 'Fe' ; do sed -i "/$k /d" out.cif ; done
  cp out.cif ../RHO_${framework}_C1_$i.cif
  cp out.cif ../RHO_${framework}_C1.cif
 cd ..
}
#
function update {
  if [ -d RestartInitial ] ; then rm -R RestartInitial ; fi
  cp -R Restart RestartInitial
  cp Movies/System_0/Framework_0_final_1_1_1_P1.cif ../RHO_${framework}_C1.cif
}
#
# MAIN
# 
folder=${cation}_${temperature}_${RandomSeed}_$framework
if [ ! -d $folder ] ; then
   mkdir $folder
   cd $folder
   touch output.data
   touch movie.pdb
   inicialization_sim
   for i in `seq 1 1` ; do
       for j in `seq 1 $n_mc` ; do
        # montecarlo
        MC_move
       done
       # molecular dynamics NPT
       temp=$temperature
       MD_move
   done
   cd ..
fi
exit 0
